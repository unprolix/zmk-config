// note: leader key sequences can currently have a maximum of five letters, unless ZMK 0.3 changed that

// the limit of sequences per leader key is CONFIG_ZMK_LEADER_MAX_SEQUENCES. defining more will result in runtime crashes.
// the limit must be defined in the .conf file for whatever you're building.



#undef ZMK_LEADER_SEQUENCE
#define ZMK_LEADER_SEQUENCE(name, leader_bindings, leader_sequence) \
    / { \
        behaviors { \
            leader: leader { \
                compatible = "zmk,behavior-leader-key"; \
                #binding-cells = <0>; \
                ignore-keys = <LSHFT RSHFT>; \
                leader_sequence_ ## name { \
                    bindings = <leader_bindings>; \
                    sequence = <leader_sequence>; \
                }; \
            }; \
        }; \
    };

#define ZMK_LEADER_UNICODE_DUAL_4_4(name, sequence, u0, u1, u2, u3, u4, u5, u6, u7) \
    UC_MACRO(name ## _uc1, &kp u0 &kp u1 &kp u2 &kp u3) \
    UC_MACRO(name ## _uc2, &kp u4 &kp u5 &kp u6 &kp u7) \
    ZMK_MACRO(name ## _uc, bindings = <&name ## _uc1 &name ## _uc2>;) \
    ZMK_LEADER_SEQUENCE(name, &name ## _uc, sequence)

#define ZMK_LEADER_UNICODE_DUAL_5(name, sequence, u0, u1, u2, u3, u4, u5, u6, u7, u8, u9) \
    UC_MACRO(name ## _uc1, &kp u0 &kp u1 &kp u2 &kp u3 &kp u4) \
    UC_MACRO(name ## _uc2, &kp u5 &kp u6 &kp u7 &kp u8 &kp u9) \
    ZMK_MACRO(name ## _uc, bindings = <&name ## _uc1 &name ## _uc2>;) \
    ZMK_LEADER_SEQUENCE(name, &name ## _uc, sequence)

#define ZMK_LEADER_UNICODE_4(name, sequence, u0, u1, u2, u3) \
    UC_MACRO(name ## _uc, &kp u0 &kp u1 &kp u2 &kp u3) \
    ZMK_LEADER_SEQUENCE(name, &name ## _uc, sequence)

#define ZMK_LEADER_UNICODE_5(name, sequence, u0, u1, u2, u3, u4) \
    UC_MACRO(name ## _uc, &kp u0 &kp u1 &kp u2 &kp u3 &kp u4) \
    ZMK_LEADER_SEQUENCE(name, &name ## _uc, sequence)

// this apparently does not work?
#define ZMK_LEADER_UNICODE_8(name, sequence, u0, u1, u2, u3, u4, u5, u6, u7) \
    UC_MACRO(name ## _uc, &kp u0 &kp u1 &kp u2 &kp u3 &kp u4 &kp u5 &kp u6 &kp u7) \
    ZMK_LEADER_SEQUENCE(name, &name ## _uc, sequence)

#define ZMK_LEADER_UNICODE_MULTI_3(name, sequence, name1, name2, name3) \
    UC_MACRO(name ## _uc, &name1 ## _uc &name2 ## _uc &name3 ## _uc) \
    ZMK_LEADER_SEQUENCE(name, &name ## _uc, sequence)



// for standardized address entry web forms
ZMK_LEADER_SEQUENCE(one_urie, &one_urie, U R I E)
ZMK_LEADER_SEQUENCE(home_address_web, &home_address_web, H O M E)
ZMK_LEADER_SEQUENCE(phone, &phone, P H O N E)
ZMK_LEADER_SEQUENCE(phone_alt, &phone_alt, T E L)



ZMK_LEADER_SEQUENCE(azrael, &azrael, A Z)  // azra√´l
ZMK_LEADER_SEQUENCE(anais, &anais, A N)  // ana√Øs

ZMK_LEADER_SEQUENCE(gr_phi, &el_phi, P H I)  // œï


//ZMK_UNICODE_SINGLE(red_heart, N2, N7, N6, N4)
//ZMK_LEADER_SEQUENCE(red_heart, &red_heart,     H E A R T)

ZMK_LEADER_SEQUENCE(gaming,      &to GAMING,     G A M E)
ZMK_LEADER_SEQUENCE(bluetooth,      &to BLUETOOTH, B T)


ZMK_LEADER_SEQUENCE(reset,      &sys_reset,     R E S E T)
ZMK_LEADER_SEQUENCE(boot,       &bootloader,    B O O T)

// debugging use
ZMK_LEADER_SEQUENCE(caps_word,  &caps_word,     C W)

// -----------------------------------------------------------------------------

ZMK_LEADER_SEQUENCE(unicode_mode_linux, &uc UC_SET_LINUX, U L)
ZMK_LEADER_SEQUENCE(unicode_mode_emacs, &uc UC_SET_EMACS, U E)

ZMK_LEADER_SEQUENCE(circled_plus, &uc 0x2295 0,  C PLUS) // ‚äï
ZMK_LEADER_SEQUENCE(circled_0, &uc 0x245F 0x2775,  C N0) // ‚ëü‚ëü // does this even exist?
ZMK_LEADER_SEQUENCE(circled_1, &uc 0x2460 0x2776,  C N1) // ‚ë†‚ù∂
ZMK_LEADER_SEQUENCE(circled_2, &uc 0x2461 0x2777,  C N2) // ‚ë°‚ù∑
ZMK_LEADER_SEQUENCE(circled_3, &uc 0x2462 0x2778,  C N3) // ‚ë¢‚ù∏
ZMK_LEADER_SEQUENCE(circled_4, &uc 0x2463 0x2779,  C N4) // ‚ë£‚ùπ
ZMK_LEADER_SEQUENCE(circled_5, &uc 0x2464 0x277A,  C N5) // ‚ë§‚ù∫
ZMK_LEADER_SEQUENCE(circled_6, &uc 0x2465 0x277B,  C N6) // ‚ë•‚ùª
ZMK_LEADER_SEQUENCE(circled_7, &uc 0x2466 0x277C,  C N7) // ‚ë¶‚ùº
ZMK_LEADER_SEQUENCE(circled_8, &uc 0x2467 0x277D,  C N8) // ‚ëß‚ùΩ
ZMK_LEADER_SEQUENCE(circled_9, &uc 0x2468 0x277E,  C N9) // ‚ë®‚ùæ
ZMK_LEADER_SEQUENCE(circled_10, &uc 0x2469 0x277F,  C T N0) // ‚ë©‚ùø
ZMK_LEADER_SEQUENCE(circled_11, &uc 0x246A 0x2780,  C T N1) // 
// there are more...


/*
ZMK_LEADER_UNICODE_4(heart, W H E A R, N2, N7, N6, N4)
*/

ZMK_LEADER_SEQUENCE(smile, &uc 0x01F60A 0, S M I L E) // üòä
ZMK_LEADER_SEQUENCE(thumb, &uc 0x01F44D 0, T H U M B)
ZMK_LEADER_SEQUENCE(amour, &uc 0x01F60D 0, A M O U R)

ZMK_LEADER_SEQUENCE(brain, &uc 0x1F9E0 0, B R A I N) // üß†
ZMK_LEADER_SEQUENCE(cry, &uc 0x1F622 0, C R Y) // üò¢
ZMK_LEADER_SEQUENCE(kiss, &uc 0x1F618 0, K I S S) // üòò

ZMK_LEADER_SEQUENCE(pour, &uc 0x1FAD7 0, P O U R) // ü´ó

ZMK_LEADER_SEQUENCE(rictus, &uc 0x1F62C 0, R I C T U) // üò¨
ZMK_LEADER_SEQUENCE(halo, &uc 0x1F607 0, H A L O) // üòá
ZMK_LEADER_SEQUENCE(fingers, &uc 0x1F91E 0, F I N) // ü§û
ZMK_LEADER_SEQUENCE(roll, &uc 0x1F644 0, R O L L) // üôÑ
ZMK_LEADER_SEQUENCE(tldr, &uc 0x1F4DC 0, T L D R) // üìú
ZMK_LEADER_SEQUENCE(wave, &uc 0x1F44B 0, W A V E) // üëã

// these two do not seem to compile with &uc.
ZMK_LEADER_UNICODE_5(eye, E Y E, N1, F, N4, N4, N1) // üëÅ
ZMK_LEADER_UNICODE_5(ewe, E W E, N1, F, N4, N1, N1) // üêë



// Single emojis (5-byte sequences)
ZMK_LEADER_SEQUENCE(koala, &uc 0x1F428 0, K O A L A) // üê®
ZMK_LEADER_SEQUENCE(kanga, &uc 0x1F998 0, K A N G A) // ü¶ò
ZMK_LEADER_SEQUENCE(east, &uc 0x1F5FF 0, E A S T) // üóø
ZMK_LEADER_SEQUENCE(cro, &uc 0x1F950 0, C R O) // ü•ê
ZMK_LEADER_SEQUENCE(snak, &uc 0x1F40D 0, S N A K) // üêç
ZMK_LEADER_SEQUENCE(vin, &uc 0x1F377 0, V I N) // üç∑
ZMK_LEADER_SEQUENCE(piz, &uc 0x1F355 0, P I Z) // üçï
ZMK_LEADER_SEQUENCE(steak, &uc 0x1F969 0, S T E A K) // ü•©
ZMK_LEADER_SEQUENCE(zzz, &uc 0x1F4A4 0, Z Z Z) // üí§


ZMK_LEADER_SEQUENCE(kiwi, &uc 0x1F95D 0, K I W I) // ü•ù
ZMK_LEADER_SEQUENCE(crepe, &uc 0x1F95E 0, C R E P E) // ü•û
ZMK_LEADER_SEQUENCE(lapin, &uc 0x1F407 0, L A P I N) // üêá
ZMK_LEADER_SEQUENCE(chick, &uc 0x1F425 0, C H I C K) // üê•
ZMK_LEADER_SEQUENCE(duck, &uc 0x1F986 0, D U C K) // ü¶Ü
ZMK_LEADER_SEQUENCE(drums, &uc 0x1F357 0, D R U M S) // üçó

ZMK_LEADER_SEQUENCE(fete, &uc 0x1F389 0, F E T E) // üéâ
ZMK_LEADER_SEQUENCE(shaka, &uc 0x1F919 0, S H A K A) // ü§ô


ZMK_LEADER_UNICODE_DUAL_4_4(red_heart, H E A R T, N2, N7, N6, N4, F, E, N0, F)




ZMK_LEADER_UNICODE_MULTI_3(love, L O V E, eye, red_heart, ewe)


// Flag emojis (dual 4-byte sequences)
ZMK_LEADER_UNICODE_DUAL_4_4(fr, F R,    N1, F, N1, E, N6, N1, F, N7) // üá´üá∑
ZMK_LEADER_UNICODE_DUAL_4_4(aus, A U S, N1, F, N1, E, N6, N1, F, N1) // üá¶üá∫
ZMK_LEADER_UNICODE_DUAL_5(usa, U S A, N1, F, N1, F, A, N1, F, N1, F, N8) // üá∫üá∏

/*

// Superscript digits
ZMK_LEADER_SEQUENCE(super_0, &uc 0x2070 0, S U P N0) // ‚Å∞
ZMK_LEADER_SEQUENCE(super_1, &uc 0x00B9 0, S U P N1) // ¬π
ZMK_LEADER_SEQUENCE(super_2, &uc 0x00B2 0, S U P N2) // ¬≤
ZMK_LEADER_SEQUENCE(super_3, &uc 0x00B3 0, S U P N3) // ¬≥
ZMK_LEADER_SEQUENCE(super_4, &uc 0x2074 0, S U P N4) // ‚Å¥
ZMK_LEADER_SEQUENCE(super_5, &uc 0x2075 0, S U P N5) // ‚Åµ
ZMK_LEADER_SEQUENCE(super_6, &uc 0x2076 0, S U P N6) // ‚Å∂
ZMK_LEADER_SEQUENCE(super_7, &uc 0x2077 0, S U P N7) // ‚Å∑
ZMK_LEADER_SEQUENCE(super_8, &uc 0x2078 0, S U P N8) // ‚Å∏
ZMK_LEADER_SEQUENCE(super_9, &uc 0x2079 0, S U P N9) // ‚Åπ

// Superscript lowercase letters
ZMK_LEADER_SEQUENCE(super_a, &uc 0x1D43 0, S U P A) // ·µÉ
ZMK_LEADER_SEQUENCE(super_b, &uc 0x1D47 0, S U P B) // ·µá
ZMK_LEADER_SEQUENCE(super_c, &uc 0x1D9C 0, S U P C) // ·∂ú
ZMK_LEADER_SEQUENCE(super_d, &uc 0x1D48 0, S U P D) // ·µà
ZMK_LEADER_SEQUENCE(super_e, &uc 0x1D49 0, S U P E) // ·µâ
ZMK_LEADER_SEQUENCE(super_f, &uc 0x1DA0 0, S U P F) // ·∂†
ZMK_LEADER_SEQUENCE(super_g, &uc 0x1D4D 0, S U P G) // ·µç
ZMK_LEADER_SEQUENCE(super_h, &uc 0x02B0 0, S U P H) //  ∞
ZMK_LEADER_SEQUENCE(super_i, &uc 0x2071 0, S U P I) // ‚Å±
ZMK_LEADER_SEQUENCE(super_j, &uc 0x02B2 0, S U P J) //  ≤
ZMK_LEADER_SEQUENCE(super_k, &uc 0x1D4F 0, S U P K) // ·µè
ZMK_LEADER_SEQUENCE(super_l, &uc 0x02E1 0, S U P L) // À°
ZMK_LEADER_SEQUENCE(super_m, &uc 0x1D50 0, S U P M) // ·µê
ZMK_LEADER_SEQUENCE(super_n, &uc 0x207F 0, S U P N) // ‚Åø
ZMK_LEADER_SEQUENCE(super_o, &uc 0x1D52 0, S U P O) // ·µí
ZMK_LEADER_SEQUENCE(super_p, &uc 0x1D56 0, S U P P) // ·µñ
ZMK_LEADER_SEQUENCE(super_r, &uc 0x02B3 0, S U P R) //  ≥
ZMK_LEADER_SEQUENCE(super_s, &uc 0x02E2 0, S U P S) // À¢
ZMK_LEADER_SEQUENCE(super_t, &uc 0x1D57 0, S U P T) // ·µó
ZMK_LEADER_SEQUENCE(super_u, &uc 0x1D58 0, S U P U) // ·µò
ZMK_LEADER_SEQUENCE(super_v, &uc 0x1D5B 0, S U P V) // ·µõ
ZMK_LEADER_SEQUENCE(super_w, &uc 0x02B7 0, S U P W) //  ∑
ZMK_LEADER_SEQUENCE(super_x, &uc 0x02E3 0, S U P X) // À£
ZMK_LEADER_SEQUENCE(super_y, &uc 0x02B8 0, S U P Y) //  ∏
ZMK_LEADER_SEQUENCE(super_z, &uc 0x1DBB 0, S U P Z) // ·∂ª
*/


// Superscript mode toggle
//ZMK_LEADER_SEQUENCE(superscript_mode, &tog SUPERSCRIPT, S U P E R) // Toggle superscript mode
