ZMK_SIMPLE_MACRO(comma_space, <&kp COMMA>, <&kp SPACE>)
ZMK_SIMPLE_MACRO(cant_wont_tail, <&kp SQT>, <&kp T>)
ZMK_SIMPLE_MACRO(dot_slash, <&kp DOT>, <&kp FSLH>)
/ {
	
	/*

	won't, can't  (no NH in english)
	i'd, i'll, i've (no IH)
	they're (no YH)


	*/


	
	behaviors {

		// Q with U->K antecedent
		adaptive_q_base: adaptive_q_base {
			compatible = "zmk,behavior-antecedent-morph";
			#binding-cells = <0>;
			defaults = <&kp Q>;
			bindings = <&key_repeat>, <&kp K>;
			antecedents = <Q U>;
			max-delay-ms = <500>;
		};

		adaptive_q_repeat: adaptive_q_repeat {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <QUICK_TAP_MS>;
			require-prior-idle-ms = <HRM_PRIOR_IDLE>;
			flavor = "balanced";
			hold-trigger-on-release;
			hold-trigger-key-positions = <KEYS_L THUMBS>;
			bindings = <&mo>, <&adaptive_q_base>;
		};


		// todo: use this to remake adaptive_q_repeat
		MAKE_ANTECEDENT_MORPH(adaptive_q_k, Q, K, U)

		MAKE_ADAPTIVE_REPEAT(adaptive_w_repeat, tlr, NUMPAD, W)

		MAKE_ADAPTIVE_REPEAT(adaptive_u_repeat, tll, SYMBOL, U)
		MAKE_ADAPTIVE_REPEAT(adaptive_d_repeat, tlr, SYMBOL, D)

		MAKE_ADAPTIVE_REPEAT(adaptive_z_repeat, tll, EXTRA, Z)
		MAKE_ADAPTIVE_REPEAT(adaptive_l_repeat, tlr, EXTRA, L)

		MAKE_ADAPTIVE_REPEAT(adaptive_f_repeat, tll, FN, F)
		MAKE_ADAPTIVE_REPEAT(adaptive_b_repeat, tlr, FN, B)
		
		MAKE_ADAPTIVE_REPEAT(adaptive_i_repeat, hml, LALT, I)
		MAKE_ADAPTIVE_REPEAT(adaptive_e_repeat, hml, LSHIFT, E)
		MAKE_ADAPTIVE_REPEAT(adaptive_a_repeat, hml, LCTRL, A)
		MAKE_ADAPTIVE_REPEAT(adaptive_p_repeat, tll, NUM, P)

		MAKE_ADAPTIVE_REPEAT(adaptive_g_repeat, tlr, NUM, G)
		MAKE_ADAPTIVE_REPEAT(adaptive_s_repeat, hmr, RCTRL, S)
		MAKE_ADAPTIVE_REPEAT(adaptive_t_repeat, hmr, RSHIFT, T)
		MAKE_ADAPTIVE_REPEAT(adaptive_r_repeat, hmr, RALT, R)

		sqt_dash: sqt_dash {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&key_layer_SQT_NUM>, <&kp MINUS>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		dqt_underscore: dqt_underscore {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&key_layer_DQT_NUM>, <&kp UNDERSCORE>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		dot_colon: dot_colon {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DOT>, <&kp COLON>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		comma_semicolon: comma_semicolon {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&comma_space>, <&kp SEMI>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		adaptive_h_quote: adaptive_h_quote {
			compatible = "zmk,behavior-antecedent-morph";
			#binding-cells = <0>;
			defaults = <&kp H>;
			bindings = <&kp SQT>, <&cant_wont_tail>, <&kp SQT>, <&kp SQT>;
			antecedents = <E N I>; // shE'll/shE'd, caN't/woN't, I'd/I'll
			max-delay-ms = <LONG_PAUSE>;
		};

		MAKE_ANTECEDENT_MORPH_ADV(adaptive_j_dot, &kp J, &dot_slash, DOT)

		tap_hold_layer_lgui_adaptive: tap_hold_layer_lgui_adaptive {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <HRM_PRIOR_IDLE>;
			flavor = "balanced";
			bindings = <&layer_lgui>, <&adaptive_h_quote>;
		};

		sqt_minus_thumb: sqt_minus_thumb {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp SQT>, <&kp MINUS>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		dqt_plus_thumb: dqt_plus_thumb {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DQT>, <&kp PLUS>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		dqt_underscore_thumb: dqt_underscore_thumb {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DQT>, <&kp UNDERSCORE>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		lts_extra_sqt_minus: lts_extra_sqt_minus {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <HRM_PRIOR_IDLE>;
			flavor = "balanced";
			bindings = <&mo>, <&sqt_minus_thumb>;
		};

		lts_fn_dqt_plus: lts_fn_dqt_plus {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <HRM_PRIOR_IDLE>;
			flavor = "balanced";
			bindings = <&mo>, <&dqt_plus_thumb>;
		};

		lts_fn_dqt_underscore: lts_fn_dqt_underscore {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <HRM_PRIOR_IDLE>;
			flavor = "balanced";
			bindings = <&mo>, <&dqt_underscore_thumb>;
		};
	};
	
};


#define HIEROPHANT_LZ &trans &trans &trans &trans &trans &trans
#define HIEROPHANT_LT &kp TILDE  &adaptive_f_repeat                          &adaptive_z_repeat  &adaptive_u_repeat  &adaptive_q_repeat NUMPAD 0  &backspace_word_delete
#define HIEROPHANT_LM &sqt_dash  &tap_hold_layer_lgui_adaptive LGUI_NAV_L 0  &adaptive_i_repeat  &adaptive_e_repeat  &adaptive_a_repeat           &adaptive_p_repeat
#define HIEROPHANT_LB &kp BSLH   &comma_semicolon                            &kp Y               &kp K               &kp O                        &kp X
#define HIEROPHANT_LH &lts_extra_sqt_minus EXTRA 0  &arcane_nav_l NAV 0  &lgui_space_tab
#define HIEROPHANT_LH_5 &trans &trans HIEROPHANT_LH

#define HIEROPHANT_RZ &trans &trans &trans &trans &trans &trans
#define HIEROPHANT_RT &kp RETURN          &adaptive_w_repeat  &adaptive_d_repeat  &adaptive_l_repeat  &adaptive_b_repeat                 &kp SEMI
#define HIEROPHANT_RM &adaptive_g_repeat  &adaptive_s_repeat  &adaptive_t_repeat  &adaptive_r_repeat  &tap_hold_layer_rgui RGUI_NAV_R N  &dqt_underscore
#define HIEROPHANT_RB &kp V               &kp C               &kp M               &adaptive_j_dot     &dot_colon                         &kp FSLH
#define HIEROPHANT_RH &rgui_space_ret   &arcane_nav_r NAV 0  &lts_fn_dqt_underscore FN 0
#define HIEROPHANT_RH_5 &trans &trans HIEROPHANT_RH
